<?php
/**
 * Implements hook_node_info().
 */
function druit_node_info() {
  return array(
    'druit' => array(
      'name' => t('Druit'),
      'base' => 'druit',
      'description' => t('Tell what you think in a short message.'),
      'has_title' => FALSE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function druit_block_info() {
  $blocks['druit_new'] = array(
    'info' => t('New druit'),
  );

  $blocks['druit_list'] = array(
    'info' => t('Recent druits'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function druit_block_view($delta = '') {
  $block = array();

  if ($delta == 'druit_new') {
    $block['subject'] = t('New druit');
    $block['content'] = drupal_get_form('druit_content_form');
  }

  if ($delta == 'druit_list') {
    $block['subject'] = t('Recent druits');
    $block['content'] = druit_list();
  }

  return $block;
}

/**
 * This is the form to create a new Druit.
 */
function druit_content_form() {
  $form['druit'] = array(
    '#title' => t('Your druit'),
    '#description' => t('Tell the whole world what you want to say in @limit characters.',
        array('@limit' => 140)),
    '#type' => 'textarea',
    '#attributes' => array('maxlength' => 140),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Form validation.
 */
function druit_content_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (strlen($values['druit']) > 140) {
    form_set_error('druit', t('Druits should have less than @limit characters.',
      array('@limit' => 140)));
  }
}

/**
 * Stores the Druit into the database.
 */
function druit_content_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $node = new stdClass;
  $node->type = 'druit';
  node_object_prepare($node);

  $node->language = 'und';
  $node->druit[$node->language][0]['value'] = $values['druit'];

  node_save($node);
  drupal_goto("node/{$node->nid}");
}

/**
 * List of recent druits.
 */
function druit_list() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'druit')
    ->propertyOrderBy('created', 'DESC')
    ->pager(20)
    ->execute();

  if (empty($result)) {
    return array();
  }

  foreach ($result['node'] as $nid) {
    $node = node_load($nid->nid);
    $render['nodes'][] = node_view($node, 'full');
  }

  $render['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 10,
  );

  return $render;
}

/**
 * Implements hook_filter_info().
 */
function druit_filter_info() {
  $filters['filter_druitter'] = array(
    'title' => t('Twitter like filter'),
    'description' => t('Converts #hashtags and @usernames in internal links.'),
    'process callback' => 'druit_filter_druitter',
  );

  return $filters;
}

/**
 * Implements the processing.
 */
function druit_filter_druitter($text, $filter, $format) {
  $patterns = array(
    '/@([a-zA-Z0-9]+)/', // User links
    '/#([a-zA-Z0-9]+)/', // Hashtag links
  );
  $replacements = array(
    '<a href="/${0}">${0}</a>',
    '<a href="/s/${1}">${0}</a>',
  );

  $text = preg_replace($patterns, $replacements, $text);
  return $text;
}

/**
 * Implements hook_field_formatter_info().
 */
function druit_field_formatter_info() {
  return array(
    'druit' => array(
      'label' => t('Druit'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function druit_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($display['type'] == 'druit') {
    foreach ($items as $delta => $item) {
      $output = check_markup($item['value'], 'druitter');
      $element[$delta] = array('#markup' => $output);
    }
  }

  return $element;
}
